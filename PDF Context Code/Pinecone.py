from pinecone import Pinecone,Index
from typing import List
# import PyPDF2
from langchain.document_loaders.pdf import PyPDFDirectoryLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain.schema.document import Document
import pdf_reader
import pdf_reader2

# Configuration
DATA_PATH = "/Data"
PINECONE_API_KEY = "pcsk_2HnqHd_MuZHH8s6PNsFc2w6cdGJm9xk8jhJt73WMWkEJW2cq996HsdmtrXsJJ1WQUXJh81"
PINECONE_ENV = "us-east-1"
INDEX_NAME = "nn"
PDF_PATH = "Data/Demo2.pdf"

# Initialize Pinecone Serverless
def init_pinecone(api_key: str, environment: str, index_name: str):
    pc = Pinecone(api_key=api_key)
    return pc.Index(index_name)

index = init_pinecone(PINECONE_API_KEY, PINECONE_ENV, INDEX_NAME)

# Store text in Pinecone (Pinecone generates embeddings)
def store_in_pinecone(index, chunks, pdf_name: str):
    vectors = []
    for chunk in chunks:
        # Pinecone Serverless will generate embeddings from the text
        vectors.append({
            "_id": chunk['metadata']['chunk_id'],
            "text":chunk['content'],
            "Section": chunk['metadata']['section']
        })

    print(vectors[0])
    return vectors

def insert_records(PDF_PATH:str):
    # text_chunks = pdf_reader.generate_chunks(PDF_PATH)
    text_chunks = pdf_reader2.get_chunks(PDF_PATH)
        
    # Store in Pinecone (embeddings generated by Pinecone)
    print("Storing text in Pinecone (embeddings will be auto-generated)...")
    pdf_name = PDF_PATH.split('/')[-1].replace('.pdf', '')
    
    index.upsert_records("default",store_in_pinecone(index, text_chunks, pdf_name))
    

def pinecone_data_tool(query):
    init_pinecone(PINECONE_API_KEY,PINECONE_ENV,INDEX_NAME)
    try:
        results = index.search_records(
            namespace="default", 
            query={
                "inputs": {"text": query}, 
                "top_k": 5
            },
            fields=["category", "text"]
        )
        print(results)
        return results

    except Exception as e:
        print(f"An error occurred: {str(e)}")
