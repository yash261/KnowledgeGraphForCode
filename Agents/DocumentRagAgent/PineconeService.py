from pinecone import Pinecone
import Agents.DocumentRagAgent.pdf_reader2 as pdf_reader2
import os

class PineconeService:
    def __init__(self):
        PINECONE_API_KEY = os.environ["PINECONE_API_KEY"]
        PINECONE_ENV = os.environ["PINECONE_ENV"]
        INDEX_NAME = os.environ["INDEX_NAME"]
        self.index = self.init_pinecone(PINECONE_API_KEY, PINECONE_ENV, INDEX_NAME)

    # Initialize Pinecone Serverless
    def init_pinecone(self,api_key: str, environment: str, index_name: str):
        pc = Pinecone(api_key=api_key)
        return pc.Index(index_name)

    # Store text in Pinecone (Pinecone generates embeddings)
    def store_in_pinecone(self,chunks, pdf_name: str):
        vectors = []
        for chunk in chunks:
            # Pinecone Serverless will generate embeddings from the text
            vectors.append({
                "_id": chunk['metadata']['chunk_id'],
                "text":chunk['content'],
                "Section": chunk['metadata']['section']
            })

        print(vectors[0])
        return vectors

    def insert_records(self,PDF_PATH:str):
        # text_chunks = pdf_reader.generate_chunks(PDF_PATH)
        text_chunks = pdf_reader2.get_chunks(PDF_PATH)
            
        # Store in Pinecone (embeddings generated by Pinecone)
        print("Storing text in Pinecone (embeddings will be auto-generated)...")
        pdf_name = PDF_PATH.split('/')[-1].replace('.pdf', '')
        
        self.index.upsert_records("default",self.store_in_pinecone(text_chunks,pdf_name))
        

    def pinecone_data_tool(self,query):
        try:
            results = self.index.search_records(
                namespace="default", 
                query={
                    "inputs": {"text": query}, 
                    "top_k": 5
                },
                fields=["category", "text"]
            )
            print(results)
            return results

        except Exception as e:
            print(f"An error occurred: {str(e)}")
